//APP.JS
//requiring JS files
var map = require('RemoteData');
var see = require('search');
var fav = require('fav');

//Create Window
var mainWin = Ti.UI.createWindow({
	title : "Main Window",
	backgroundImage : "map.png"
});

//view start
var titleView = Ti.UI.createView({
	borderRadius : '5%',
	center : '0%',
	height : '40%',
	width : '60%',
	backgroundColor : '#fff'
});

var titleLabel = Ti.UI.createLabel({
	text : "GEO loc",
	font : {
		fontStyle : 'Helvetica',
		fontSize : 36
	}
});

var enterBTN = Ti.UI.createButton({
	title : 'ENTER',
	bottom : '10%',
	center : '0%',
	font : {
		fontStyle : 'Helvetica',
		fontSize : 24
	}
});

enterBTN.addEventListener('click', function() {

	// created tab group
	var theTabs = Ti.UI.createTabGroup();

	// created character tab
	var mapTab = Ti.UI.createTab({
		title : 'Map',
		window : map.mapWin
	});

	// created favorite tab
	var sTab = Ti.UI.createTab({
		title : 'Search',
		window : see.sWin
	});

	// created favorite tab
	var favTab = Ti.UI.createTab({
		title : 'Stored',
		window : fav.favWin
	});
	//Tabs Main Code
	theTabs.addTab(mapTab);
	theTabs.addTab(sTab);
	theTabs.addTab(favTab);
	theTabs.open();
});
titleView.add(titleLabel, enterBTN);

//view end

//Window Main Code
mainWin.add(titleView);
mainWin.open();





//GEO_API.JS
// var list = require('listview');

//url variable
var url = 'http://api.nytimes.com/svc/semantic/v2/geocodes/query.json?nearby=37.78583526611328,-122.40641784667969&api-key=ec2c67ba0d91240ac18bbf24043c8cb5:1:68792990';

//onload function start
var apiResponse = function() {
	//converting marvel api json data
	var json = JSON.parse(this.responseText);
	var times = json.results;
	var data = [];

	//setting nytimes api json data to variables
	for (var i = 0; i < times.length; i++) {
		// copyright = json[i].copyright;
		name = times[i].geocode.name;
		county = times[i].geocode.admin_name2;
		state = times[i].geocode.admin_name1;
		st = times[i].geocode.admin_code1;
		countryAB = times[i].geocode.country_code;
		country = times[i].geocode.country_name;
		latitude = times[i].geocode.latitude;
		longitude = times[i].geocode.longitude;
		dist = Math.round(times[i].geocode.distance * 10) / 10;

		// console.log(name);
		// console.log(county);
		// console.log(state);
		// console.log(country);
		// console.log(latitude);
		// console.log(longitude);

		for (var a = 0; a < json.length; a++) {
			copyright = json[a].copyright;
		}

		//creating row for times listview
		var seclist = Ti.UI.createListSection({
		});

		data.push({
			properties : {
				name : name,
				st : st,
				county : county,
				state : state,
				countryAB : countryAB,
				country : country,
				latitude : latitude,
				longitude : longitude,
				dist : dist
			},
			name : {
				text : name + ', ' + st
			},
			st : {
				text : st
			},
			county : {
				text : county
			},
			state : {
				text : state
			},
			country : {
				text : country
			},
			countryAB : {
				text : countryAB
			},
			latitude : {
				text : 'lat: ' + latitude
			},
			longitude : {
				text : 'lng: ' + longitude
			},
			dist : {
				text : dist
			}
		});
		seclist.setItems(data);

	};
	listview1.sections = [seclist];
};
//onload function end

//onerror function start
var apiError = function(e) {
	Ti.API.debug("Status: " + this.status);
	Ti.API.debug("Text: " + this.responseText);
	Ti.API.debug("Error: " + e.error);
	alert("Please connect to the Internet");
};
//onerror function end

//HTTPclient start
var xhr = Ti.Network.createHTTPClient({
	onload : apiResponse,
	onerror : apiError,
	timeout : 5000
});
//HTTPclient end

//Main Code
xhr.open('GET', url);
xhr.send();





//STORAGE.JS
//Creating Database
var geo = Ti.Database.open('location');
var wowData = Ti.App.Properties.getString('geoData');
geo.execute('CREATE TABLE IF NOT EXISTS location (id INTEGER PRIMARY KEY, name TEXT, countryAB TEXT, latitude INTEGER, longitude INTEGER)');

//Inserting data from save func start
function insertData() {
	var data = [];

	var  secInfo = geo.execute('SELECT * FROM location');

	while (secInfo.isValidRow()) {
		var name = secInfo.fieldByName('name');
		var st = secInfo.fieldByName('st');
		// var county = rowInfo.fieldByName('county');
		// var state = rowInfo.fieldByName('state');
		var countryAB = rowInfo.fieldByName('countryAB');
		// var country = rowInfo.fieldByName('country');
		var latitude = secInfo.fieldByName('latitude');
		var longitude = secInfo.fieldByName('longitude');
		// var dist = rowInfo.fieldByName('dist');
		var id = secInfo.fieldByName('id');
		
		dataInfo.push({
			name : name,
			st : st,
			// county : county,
			// state : state,
			countryAB : countryAB,
			// country : country,
			latitude : latitude,
			longitude : longitude,
			// dist : dist
			id : id
		});

		Ti.API.info('=========================');

		secInfo.next();
	};
	return data;
};
var geoData = insertData();
exports.geoData = geoData;
//Inserting data from sav func end


//saving data from app.js start
var save = function(name, countryAB, latitude, longitude) {
	input = {};
	input.name = name;
	input.countryAB = countryAB;
	input.latitude = latitude;
	input.longitude = longitude;
	geo.execute('INSERT INTO location (name, countryAB, latitude, longitude) VALUES (?, ?, ?, ?)', input.name, input.countryAB, input.latitude, input.longitude);
	geoData;
};
exports.save = save;
//saving data from app.js end


// var id = a.rowData.id;
// 
// geo.execute('SELECT * FROM location WHERE ID=?', id);
// input = {};


//delete data start
function delFunc() {
	geo.execute('DELETE FROM location WHERE id=?', id); 
	// seclist.setItems(geoData);
};
exports.delFunc = delFunc;
//delete data end